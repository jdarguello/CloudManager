#!/usr/bin/env nu
# ───────────────────────────────────────────────────────────────
# main.nu — Custom CLI para el manejo de operaciones de 
#            Platform-engineering 
# ───------------------------------------------------------------

source aws/kubeconfig.nu
source infra/spokes.nu
source github/new_businessflow.nu
source github/new_micro.nu
source github/push.nu
source backstage/crossplane-integration.nu
source crossplane/creds.nu
source flux/pre-build.nu
source flux/bootstrap.nu
source flux/new_spoke.nu
source utils.nu

def main [] {}

def "main manager setup" [
    --cluster-name:string = "Manager-Cluster"
    --region:string = "us-east-1"
    --kube-out:string = "kubeconfig-dot.yaml"
] {
    #1. Crear infraestructura base con Terraform
    main infra setup

    #2. Configura el kubeconfig del 'Manager-Cluster'
    main aws get-kubeconfig

    #3. Habilitar e instalar Flux
    main flux bootstrap

    #4. Habilitar crossplane-system ns
    kubectl create ns crossplane-system

    #5. Configura el sa del cluster para integrarlo con backstage
    main get cluster data --create_service_account=true

    #6. 
}

#Registro de flujos de negocio ya existentes
def "main businessflow register" [

] {

}

def "main businessflow new" [
    --name: string                  #Nombre del flujo de negocio
    --existing-infra = false
    --description:string = ""       #(Opcional) Descripción del flujo de negocio
    --min-size=1                    #Mínimo número de nodos
    --max-size=2                    #Máximo número de nodos
    --desired-size=1                #Tamaño deseado
    --instance-type="m6i.large"     #Tipo de instancias
    --cidr="172.0.0.0/16"           #CIDR de la VPC
] {
    #1. Creación del repo
    if (not $existing_infra) {
        main github new-businessflow --name=$name --description=$description
    }
    
    #2. Levantar infraestructura (EKS)
    if (not $existing_infra) {
        main infra new-spoke --cluster-name=$"($name)-Cluster" --min-size=$min_size --max-size=$max_size --desired-size=$desired_size --instance-type=$instance_type --cidr=$cidr
    }

    #3. (Config) Generar credenciales (cluster-kubeconfig) como secreto en el 
    #   'Manager-Cluster' para ejecutar definiciones desde el 'hub' hacia el spoke
    main flux pre-build --spoke-cluster=$"($name)-Cluster"

    #4. (Config) Credenciales de aws para generación de recursos con Crossplane
    main crossplane set-creds --businessflow-name=$name

    #5. Definición del nuevo 'spoke' en CloudManager
    if (not $existing_infra) {
        let spoke_name = $name | str downcase
        main flux new-spoke --spoke-name=$spoke_name --spoke-ns=$"($spoke_name)-cluster" --git-url=$"https://github.com/jdarguello/($name)-Businessflow" --git-ref="refs/head/main" --git-branch="main" --flux-path="infra/gitops"
    }

    #6. Bootstrap de FluxCD
    main flux bootstrap --repository=$"($name)-Businessflow" --cluster-name=$"($name)-Cluster"
    
    #7. Registrar spoke en el Software Catalog (Backstage)

}

def "main businessflow delete" [
    --name: string                  #Nombre del flujo de negocio

] {
    #1. Eliminar infraestructura
    main infra delete-spoke --cluster-name=$"($name)-Cluster" 

    #2. Eliminar registro del spoke en el Software Catalog (Backstage)
}

def "main businessflow new-micro" [
    --businessflow-name:string              #Nombre del flujo de negocio
    --micro-name:string                     #Nombre del microservicio
] {
    #1. Crear el repositorio

    #2. Registrar el micro con el System (Backstage)

}